# 算法

## 插入排序

### 直接排序
未知的插入到排好序的
### shell排序
分组排序，再合并组排序

## 选择排序
### 直接选择排序
选出最大/最小的放在头或者尾，再找次大、次小的
### 堆排序
利用到完全二叉树？？？



## 交换排序
### 冒泡排序
  之前用的最多，最简单,最基础 <br>
  两个嵌套的for循环遍历，每次对比大小。<br>
  外层for循环每次找出最大、最小值 <br>
### 快速排序
  冒泡的升级版 <br>
  每次挑出比指定元素小的都放在他前面，挑出比指定元素大的都放在后面。



# LeetCodeNote

### 1.numJewelsInStones

```java
public int numJewelsInStones(String J, String S) {
    char[] s = S.toCharArray();
    int cnt = 0;
    for(int i = 0; i<s.length; i++){
        if(J.contains(String.valueOf(s[i]))){
            cnt++;
        }
    }
    return cnt;

```

#### 问题描述

遍历字符串String

#### 解决方案

>   .toCharArray()方法转化为字符数组
>   .contains  遍历的一种。
>   .charAt()

2.将char转换为String大致有6种方法。总结如下：

1.  String s = String.valueOf('c'); //效率最高的方法
2.  String s = String.valueOf(new char[]{'c'}); //将一个char数组转换成String
3.  String s = Character.toString('c');
    // Character.toString(char)方法实际上直接返回String.valueOf(char)
4.  String s = new Character('c').toString();
5.  String s = "" + 'c';
    // 虽然这个方法很简单，但这是效率最低的方法
    // Java中的String Object的值实际上是不可变的，是一个final的变量。
    // 所以我们每次对String做出任何改变，都是初始化了一个全新的String Object并将原来的变量指向了这个新String。
    // 而Java对使用+运算符处理String相加进行了方法重载。
    // 字符串直接相加连接实际上调用了如下方法：
    // new StringBuilder().append("").append('c').toString();

1.  String s = new String(new char[]{'c'});

### 3.获取字符串内某子字符串的

用.indexof()获得位置
再用.sunstring()获取子字符串。

### 4.两数交换不申请中间变量

#### 解决方案：

1.  异或
2.  加减

[参考资料]: https://zhidao.baidu.com/question/120865912.html	"title"

