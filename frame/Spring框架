# Spring框架



# 核心：AOP和IOC



## AOP	Aspect Oriented Programming

> *是对OOP（Object Orient Programming）的一种补充，专门用于处理一些具有横切性质的服务。*

- 方式：将那些影响了多个类的公共行为封装到一个可重用模块
- 底层技术：代理模式
- 优势：
  - 隔离业务逻辑与系统级服务，使核心代码更加简洁，降低耦合度
  - 使开发人员专注于业务逻辑，提高开发效率
  - 提高程序的可重用性
- 应用
  - 日志记录
  - 性能统计
  - 安全控制
  - 事务处理
  - 异常处理





## IOC 	Inversion of Control

> 参考资料：
>
> - [谈谈Spring IOC是怎么实现解耦的](https://blog.csdn.net/erlian1992/article/details/78007973)

- 底层技术：java反射机制

- 方式：依赖对象的获得被反转,由自己new对象变为由容器注入
- 优势：降低耦合





## 高内聚，低耦合

>  参考资料
>
> - [java 高内聚，低耦合的理解 ](http://blog.163.com/darlingming@126/blog/static/2342137201310652130113/)

### 低耦合

- 一个完整的系统，模块与模块之间，尽可能的使其独立存在。

- 模块与模块之间的接口，尽量的少而简单。

- 也就是说，让每个模块，尽可能的独立完成某个特定的子功能。
- 这样有利于修改和组合(重用)。



### 高内聚

- 在一个模块内，让每个元素之间都尽可能的紧密相连。
- 也就是充分利用每一个元素的功能，各施所能，以最终实现某个功能。



> 耦合:指各个外部程序(子程序)之间的关系紧密度
> 内聚:指程序内的各个模块之间的关系紧密度

