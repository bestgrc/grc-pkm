# java线程学习笔记

### 线程五种状态
1. 新建
2. 就绪
3. 运行
4. 阻塞
5. 终止

#### Thread.State类申明六种线程状态
|状态|名称|
|:---:|:---:|
|1. 新建|new|
|* 运行|runnable|
|* 阻塞|blocked|
|* 等待 (时间不确定)|waiting|
|* 等待（时间确定）|timed_waiting|
|* 终止|terminated|

#### 改变状态的方法
1. start()启动
* sleep()睡眠
* interrupt()中断

### 两种线程对象实现方法
1. 继承Thread类
2. 实现runnable接口

>线程对象由Thread类或其子类申明，执行run（）方法实现具体方法

### 优先级
1-10 越大越优，默认为5
>main线程优先于其他线程执行。

### 定时器
Timer



### 在多线程系统中，多个线程之间有______和______两种关系。

#### 同步、互斥



### 线程间的竞争与互斥

#### 临界区调度原则
1. 无空等待
2. 有空让进
3. 择一而入
4. 算法可行

#### 资源竞争两大问题
1. 死锁
2. 饥饿

#### 线程互斥实现:synchronized()

#### 线程同步
* 协作之间互相等待对方消息或信号的协作关系
* PV操作：
 1. P:测试信号量状态
 2. V改变信号量状态
* java线程通信方法：wait()、notify()等



------

# 线程池

### 出现的问题：

- 并发线程数量多，线程执行时间短，频繁创建和销毁线程消耗资源系统效率低下。

### 解决方案:

- 使用线程池

### 优势：

- 使线程得到复用



------

# 多线程

### 出现的问题：

- 程序中需要执行耗时任务时。如数据库读写，io操作

- 程序中需要等待的任务。用户输入，文件读取。进行io操作时单线程程序的cpu是空闲的

- 目的：提高cpu利用率



## 同步交互：

- 指发送一个请求,需要等待返回,然后才能够发送下一个请求，有个等待过程；



  ## 异步交互：

- 指发送一个请求,不需要等待返回,随时可以再发送下一个请求，即不需要等待。 区别：一个需要等待，一个不需要等待，在部分情况下，我们的项目开发中都会优先选择不需要等待的异步交互方式。